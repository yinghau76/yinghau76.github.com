<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>development on Simply Patrick</title>
    <link>https://blog.simplypatrick.com/categories/development/</link>
    <description>Recent content in development on Simply Patrick</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 25 Nov 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.simplypatrick.com/categories/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Good Software Development Practice from Facebook</title>
      <link>https://blog.simplypatrick.com/posts/2012/11-25-good-software-development-practice-from-facebook/</link>
      <pubDate>Sun, 25 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2012/11-25-good-software-development-practice-from-facebook/</guid>
      <description>在 Phabricator 文檔裡面，發現幾個不錯的軟體開發實務：
 Recommendations on Branching Recommendations on Revision Control Writing Reviewable Code Using Lint to Improve Code Review  個人認為是蠻有參考價值的，值得一看。</description>
    </item>
    
    <item>
      <title>Phabricator - Collaboration Tool from Facebook</title>
      <link>https://blog.simplypatrick.com/posts/2012/11-08-phabricator-collaboration-tool-from-facebook/</link>
      <pubDate>Thu, 08 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2012/11-08-phabricator-collaboration-tool-from-facebook/</guid>
      <description>對 Phabricator 的第一印象就是很 social network，使用界面上也很有 Facebook 風格：
Phabricator 是 Facebook 內部的線上協作開發工具，今年夏天開源出來讓外界使用，有些新興的網路公司如 Dropbox 或 Quora 等也有在使用，不過 open-source project 方面似乎只看到 LLVM 及 WikiMedia 有要採用它來做 code review 工具。
Phabricator 由以下幾個主要功能組成：
 Differential 是 code review 工具，可以搭配 SVN, Mercurial, Git, 或是直接貼 plain-text diff 來做 pre-push 的代碼審查。 Maniphest 用來做 defect tracking。 Diffusion 可以線上瀏覽程式碼修改歷史。 Phriction 是 Wiki 文件系統。 另外有些比較小的模組：  Phame 個人部落格 Ponder 線上 Q&amp;amp;A Herald 可以自定事件通知的處理方式 Owner 協助幫忙找到任意原始碼的負責人 Paste 可以張貼分享原始碼 Showvote 可以辦投票活動 Countdown 倒數計時器 File 線上檔案分享 Macro 有點惡搞的 image macro &amp;hellip;    因為 Facebook 是從 PHP 起家的，從 Phabricator 這名字不難猜出來這系統也是用 PHP 開發的，連它搭配的 client 端工具 Arcanist 也是用 PHP 做的，一整個 PHP 到底。</description>
    </item>
    
    <item>
      <title>SCRUM and PDCA</title>
      <link>https://blog.simplypatrick.com/posts/2012/10-14-scrum-and-pdca/</link>
      <pubDate>Sun, 14 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2012/10-14-scrum-and-pdca/</guid>
      <description>SCRUM 用 PDCA 的精神來闡述：
圖片出處：magia3e</description>
    </item>
    
    <item>
      <title>Ninja - a small build system</title>
      <link>https://blog.simplypatrick.com/posts/2012/08-18-ninja-a-small-build-system/</link>
      <pubDate>Sat, 18 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2012/08-18-ninja-a-small-build-system/</guid>
      <description>快才是王道  Ninja is a small build system with a focus on speed. It differs from other build systems in two major respects: it is designed to have its input files generated by a higher-level build system, and it is designed to run builds as fast as possible.
 Ninja 非常簡約的首頁這樣地描述著自己。對我而言，它是絕佳的 make 替代品，因為它速度飛快而且語法簡潔易懂。
這是一個簡單的 build.ninja 範例:
cxx = g++ cflags = -g -Iinclude -Iout -I/usr/local/include -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-exceptions -fno-rtti -fno-common -Woverloaded-virtual -Wcast-qual -L/usr/local/lib -lpthread -lm -lLLVMX86Disassembler -lLLVMX86AsmParser -lLLVMX86CodeGen -lLLVMX86Desc -lLLVMSelectionDAG -lLLVMAsmPrinter -lLLVMMCParser -lLLVMX86AsmPrinter -lLLVMX86Utils -lLLVMX86Info -lLLVMJIT -lLLVMExecutionEngine -lLLVMCodeGen -lLLVMScalarOpts -lLLVMInstCombine -lLLVMTransformUtils -lLLVMipa -lLLVMAnalysis -lLLVMTarget -lLLVMMC -lLLVMCore -lLLVMSupport rule flex command = flex -o $out $in rule bison command = bison -d -o $out $in rule cxx command = $cxx $cflags -o $out $in build out/tokens.</description>
    </item>
    
    <item>
      <title>Continuous Integration and Android</title>
      <link>https://blog.simplypatrick.com/posts/2012/04-07-continuous-integration-and-android/</link>
      <pubDate>Sat, 07 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2012/04-07-continuous-integration-and-android/</guid>
      <description>在 Jenkins 上設定 Android app 的持續整合 並不困難，而且是頗讓人愉快的一件事，因為這充分體現了工程師懶惰的美德，要我自己去弄這些可以自動化的工作會要我的命，而剩下唯一的問題就是需要架設 server，但在雲端運算盛行的今日，你可以大膽地賭有人已經提供這樣的服務了。
CloudBees 提供的正是 &amp;ldquo;Jenkins as a Service&amp;rdquo; 這種服務，講白了就是可以把 Jenkins server 架在 CloudBees 的 server 上，你要做的就是把 sourec code 推到它提供的的 git repository 或是 GitHub 上即可。
如果你是獨立的 Android app 開發者，CloudBees 提供的免費服務其實還不錯，非常值得考慮使用：
 附帶一提，Hudson/Jenkins 的創造人 Kohsuke Kawaguchi 目前就是在 CloudBees 擔任 Architect。
參考：
 7 Ways to Optimize Jenkins/Hudson White Paper  </description>
    </item>
    
    <item>
      <title>Git Workflow</title>
      <link>https://blog.simplypatrick.com/posts/2011/12-03-git-workflow/</link>
      <pubDate>Sat, 03 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2011/12-03-git-workflow/</guid>
      <description>由於 git 要開分支很容易，但要怎麼運用分支來管理就是一門學問了。在網路上最常看到的是 Git Flow：
除了這個方式外，另外一種常用的方法是如 git help workflows 所描述的。為了容易理解，我用 Pencil 畫了這張示意圖：
雖然前後兩張圖用的 branch 的名稱及用途不大一樣，但有些基本道理是相同的：
 平常只從穩定的分支 merge 到不穩定的分支。這裡的穩定及不穩定是相對的，例如第二張圖中 maint 比 master 穩定，而 master 又比 next 穩定；在第一張圖中，release 比 develop 穩定，hotfix 又比 develop 穩定。我說的 merge 是 git 中 branch to branch 的 merge，例如 merge A to B 是讓 branch A 所有的改動都合併到 branch B 中。 在適當的時候可以從不穩定分支合併改動到穩定分支，例如第一張圖中的 developer -&amp;gt; release -&amp;gt; master 的合併，又例如第二張圖中的 next -&amp;gt; master -&amp;gt; maint。 Bugfix 應該 check-in 到最舊且需要這個改動的分支，然後再根據上一條規則的作法傳佈到較新的分支上。這樣做可以確保不會有忘記 merge 的 bugfix。 新 feature 都應該在獨立的分支中開發。  不管是用那一種方式，善用分支來管理產品的開發及產品發佈已經是個軟體開發人員必備的技能了，如果你還不熟悉，趕快找個機會把這些方法用到你目前正在做的工作上吧。</description>
    </item>
    
    <item>
      <title>Subversion 1.5 is coming</title>
      <link>https://blog.simplypatrick.com/posts/2007/2007-08-05-389/</link>
      <pubDate>Sun, 05 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2007/2007-08-05-389/</guid>
      <description>Subversion 要出 1.5 版了，我所期待的兩個重要功能： merge tracking 及 changelist 到時都會支援。
有了這兩個功能之後，Subversion 跟 Perforce 之間的主要差距就剩下了一個好用的 client application，TortoiseSVN 雖然還不錯，但離我心目中的理想境界還有一段差距啊。</description>
    </item>
    
    <item>
      <title>BuildBot on Windows</title>
      <link>https://blog.simplypatrick.com/posts/2007/2007-05-06-387/</link>
      <pubDate>Sun, 06 May 2007 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2007/2007-05-06-387/</guid>
      <description>好久沒在 blog 上寫東西了，原因是忙著在新工作上進入狀況，這週末有點空就先寫一篇偷偷 po 上來，Jecky 接好囉&amp;hellip;
繼 TinderBox 後，最近玩了一下頗受歡迎的 BuildBot，架構比起 TinderBox 更有彈性，也更容易擴充。有興趣的可以參考這份簡報。
雖然 BuildBot 是用 Python 寫的，理論上在 Windows 上面跑應該是完全沒問題。試了一下，還是發現沒有想像中的順利，不過費了一番功夫，還是把它搞定了，想玩玩的人可以參考我寫的這份指引：buildbot p4 windows。</description>
    </item>
    
    <item>
      <title>Getting Real</title>
      <link>https://blog.simplypatrick.com/posts/2006/2006-10-27-354/</link>
      <pubDate>Fri, 27 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2006/2006-10-27-354/</guid>
      <description>因為 Ruby on Rails 而聲名大噪的 37signals 出了一本書叫《Getting Real》來宣傳他們如何快速地開發小型 web application 的方法，內容涵蓋組織、市場、需求、流程、設計、實作、宣傳、定價、客戶支援等等。
我只有大致瀏覽過內容，不過就可以感受到 Getting Real 的精神其實也正反映在 RoR 的設計上，也跟 Agile Methodology 的理念相當契合。 讓我不禁想起這句話『It&amp;rsquo;s not the gig that eat the small&amp;hellip;It&amp;rsquo;s the fast that eat the slow』。 我個人相當推薦閱讀，但我不建議盲目地遵循這些規則，我向來認為如果這些東西能刺激一些新的思考，進而造成實際工作的改進，那就值得了。
37signals 真是頗屌的一家小公司。</description>
    </item>
    
    <item>
      <title>Tinderbox3</title>
      <link>https://blog.simplypatrick.com/posts/2006/2006-10-22-352/</link>
      <pubDate>Sun, 22 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2006/2006-10-22-352/</guid>
      <description>我也算是 Tinderbox 的愛用者了，從難裝地要命的第一版、大幅改寫的 Tinderbox2、到最新的 Tinderbox3 我都玩過。John Keiser 設計的第三版架構上蠻不錯的，幾乎所有的客製化都只需要修改用戶端，只要會寫 Perl script 很快就可以上手修改成想要的樣子。
Tinderbox 主要的目的當然就是用來實現 Continuous Integration，因為我們的產品是同一份 code 必須同時編譯成在不同 Windows Mobile/Desktop 平台的執行碼，很容易就有人﹝其實是我﹞不小心 check-in 一份只能在某個平台上編譯成功的 code。例如下面這畫面就是有人不小心加入了在 Windows Desktop 不能成功編譯的 code：
我做的更改主要是是讓它可以偵測 Perforce 上的 check-in 動作，一旦有任何的更改，負責建置版本的機器馬上會醒過來為各個平台重新編譯最新的程式碼，如果一旦發現有任何編譯或是聯結的問題，它就會自動發信來提醒有嫌疑的更改者。另外一個小更改就是把 nightly build 的功能加上去，其實只是在每天深夜會自動醒來並重新編譯所有的 code，編譯成功後把可安裝的版本依日期放置到固定的地方，QA 就能夠每天拿到熱騰騰的版本來進行各種測試啦。
設置這些東西所需要花的時間及資源其實很少，但之後省下的麻煩就是讓我願意花時間從第一版試到第三版的最重要原因。</description>
    </item>
    
    <item>
      <title>git: content addressable filesystem</title>
      <link>https://blog.simplypatrick.com/posts/2006/2006-10-17-351/</link>
      <pubDate>Tue, 17 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2006/2006-10-17-351/</guid>
      <description>今天花了點時間玩了一下 git，頗有趣，我想 git 應該會成為 subversion 之外的另一個主流。因為 git 的版本號碼不再是傳統的數字編號，而是如 e2659fcf690ec693c04c82b03202fc5530d50960 這樣的十六進位數字，真是有點不習慣，還好這樣的版本號碼只要沒重複到是可以簡稱的，例如 e2659f，不然的話光打這些字就會被搞死了。
不過還是有點概念沒搞清楚，這幾天再練習看看囉。</description>
    </item>
    
    <item>
      <title>Every Software Project Needs: MPUT</title>
      <link>https://blog.simplypatrick.com/posts/2006/2006-10-16-350/</link>
      <pubDate>Mon, 16 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2006/2006-10-16-350/</guid>
      <description>一份關於軟體開發的 presentation by Jim Kent，是 google 時無意發現的，寫的很棒，主題是任何成功的軟體專案都需要下面四個條件：
 A sense of the users Wise managers Pragmatic programming Thorough testing  </description>
    </item>
    
    <item>
      <title>Embedding Grapics in RTF</title>
      <link>https://blog.simplypatrick.com/posts/2006/2006-10-13-347/</link>
      <pubDate>Fri, 13 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2006/2006-10-13-347/</guid>
      <description>今天發現用 docbook2rtf 做出來的 RTF 檔不支援內嵌圖片，google 了一下，發現了有個 Perl script 可以做這樣的轉換：RE: Embedding graphics in RTF
有需要的自行剪下程式存檔執行即可：
# Perl # $Header: /usr/local/cvs/test/dde/publish/Scripts/word-update-all.pl,v 1.3 1999/06/17 15:21:58 Andrei Exp $ my $no_list_file = 0; while ( $#ARGV &amp;gt; 0 ) { $_ = $ARGV[0]; SWITCH: { /^\-\?$/ &amp;amp;&amp;amp; do { usage (); return -1; }; /^\-f$/ &amp;amp;&amp;amp; do { shift; $list_file = shift; last SWITCH; }; /^\-f\-$/ &amp;amp;&amp;amp; do { shift; $no_list_file = 1; last SWITCH; }; /^\-i$/ &amp;amp;&amp;amp; do { shift; $in_path = shift; last SWITCH; }; /^\-o$/ &amp;amp;&amp;amp; do { shift; $out_path = shift; last SWITCH; }; /^\-v$/ &amp;amp;&amp;amp; do { shift; $visible = 1; last SWITCH; }; usage (); print &amp;#34;Unknown command line argument.</description>
    </item>
    
    <item>
      <title>Google /* Code Search */</title>
      <link>https://blog.simplypatrick.com/posts/2006/2006-10-12-345/</link>
      <pubDate>Thu, 12 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2006/2006-10-12-345/</guid>
      <description>呵呵&amp;hellip; 這個 programmer 看了應該都不覺莞爾吧：Funny results from Google Code Search ? shakalaca
不過以後要找 sample code 就容易多了吧&amp;hellip; :-)</description>
    </item>
    
    <item>
      <title>MeWare, ThemWare, and UsWare</title>
      <link>https://blog.simplypatrick.com/posts/2006/2006-02-09-306/</link>
      <pubDate>Thu, 09 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2006/2006-02-09-306/</guid>
      <description>Eric Sink 另外一篇有趣的文章《Yours, Mine and Ours》，講的是軟體開發者與使用者之間的認知落差。</description>
    </item>
    
    <item>
      <title>Reading Joel on Software</title>
      <link>https://blog.simplypatrick.com/posts/2005/2005-08-16-280/</link>
      <pubDate>Tue, 16 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2005/2005-08-16-280/</guid>
      <description>持續地閱讀 Joel on Software 應該也有兩年以上的時間了。雖然幾乎所有的文章我都已經在電腦螢幕前翻閱過了，但是當 Joel 將他的文章集結出書時，我還是忍不住買了一本，畢竟我還是很享受把書拿在手上翻了一遍又一遍的感覺。
我將書裡面的內容歸納為『當你無可救藥地要創立自己的軟體公司前，你一定要知道的事』或是『除了你書架上那一拖拉庫關於程式設計的書外，你一定要讀的一本書』。然而我並不是要你去相信 Joel 講的每一件事，而是去學習他的思考方式，正如同書背上的這段介紹：
He eduated us, he entertained us, and, yes, sometimes he infuriated us, but he has always made us think about what it is we are doing when we sit down in front of that blank computer screen&amp;hellip;</description>
    </item>
    
    <item>
      <title>The Best Software Writing I</title>
      <link>https://blog.simplypatrick.com/posts/2005/2005-06-21-256/</link>
      <pubDate>Tue, 21 Jun 2005 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2005/2005-06-21-256/</guid>
      <description>The Best Software Writing I: Selected and Introduced by Joel Spolsky 是 Joel 編輯的新書，書裡蒐集了許多很棒的文章，都是關於軟體開發的。這些文章很容易地都可以在作者的個人網站裡找到 (感謝這些樂於分享知識的 bloggers)：
 Ken Arnold - Style Is Substance Leon Bambrick - Award for the Silliest User Interface: Windows Search Michael Bean - The Pitfalls of Outsourcing Programmers Rory Blyth - Excel as a Database Adam Bosworth - ICSOC04 Talk danah boyd - Autistic Social Software Raymond Chen - Why Not Just Block the Apps That Rely on Undocumented Behavior?</description>
    </item>
    
    <item>
      <title>developer-centric or not</title>
      <link>https://blog.simplypatrick.com/posts/2005/2005-04-10-234/</link>
      <pubDate>Sun, 10 Apr 2005 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2005/2005-04-10-234/</guid>
      <description>Eric Sink 在《Geeks Rule and MBAs Drool》中提出的這些論點真的是說進我的心坎裡：
Virtually all decisions in a small ISV should be made with the involvement of technology person.
The skills of a developer are applicable to many other tasks besides coding.
Companies should not be afraid to let developers get involved in activities other than software construction.
Developers should work very hard to remember that the world does not revolve around them.  Joel 之前在《Rick Chapman is In Search of Stupidity》也曾提出相同的看法。我認為這種 developer-centric 的文化是判斷一家軟體公司是否會成功的關鍵，至少全世界最大的軟體公司 Microsoft 就是個實例。然而真正困難的地方是：隨著公司組織的成長與擴張，保持這種精神不被稀釋。如果在你的軟體公司裡，programmers 的角色往往是沉默聽令的一群，或者意見總是無法上達天聽，如同 Joel 的建議，趕快準備履歷換公司吧。</description>
    </item>
    
    <item>
      <title>BitKeeper &amp; Linux</title>
      <link>https://blog.simplypatrick.com/posts/2005/2005-04-07-232/</link>
      <pubDate>Thu, 07 Apr 2005 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2005/2005-04-07-232/</guid>
      <description>Linux Kernel Development 要和 BitKeeper 脫鉤了。詳情可以看 fa.linux.kernel 的討論，不過 subversion 的粉絲難免要失望了。
老實說我一點也不喜歡 BitKeeper，它在 Windows 上的 UI 實在是很憋腳。</description>
    </item>
    
    <item>
      <title>SCM Branch</title>
      <link>https://blog.simplypatrick.com/posts/2005/2005-04-05-231/</link>
      <pubDate>Tue, 05 Apr 2005 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2005/2005-04-05-231/</guid>
      <description>如果你有用過一些 source control tool，卻從沒用過 branch 的機制，可以讀讀 Eric Sink 的這篇文章：Source Control HOWTO Chapter 7: Branches。
就我的觀點，可以從三個方面來評量 source control tool 的好壞：穩定性、速度、branch 機制。老實說，前兩個條件是最基本的要求，如果你認為某個版本控制系統不穩定或是速度太慢，別用它！因為它帶來的麻煩會比好處還要多，況且你應該有其他更好的選擇。如果穩定性及速度都能符合要求，要比較的就是 branch 機制是否好用。
事實上，談到 branch 不可能不談到 merge，而且那才是麻煩的地方。諷刺的是，所有的版本控制系統都誇稱產生一個新的 branch 有多容易，branch 可以帶來多少多少的好處，卻絕口不提在 branch 間 merge code 有多麼地麻煩。正如同 Eric 的比喻，一個新的 branch 就如同一個小孩，如果有人跟你說生個小孩有多快多方便，卻沒告訴你照顧一個小孩有多麻煩，你會相信他的話去生個小孩嗎？
目前我知道的版本控制系統只有 AccuRev 針對另人頭痛的 merge 問題提出獨有的 stream-based architecture。我最喜歡的 Perforce 不知道是否會在這方面做改進，而對於 subversion 就只能期待有一些 open-source project 來實作這方面的功能。</description>
    </item>
    
    <item>
      <title>Bug Reporting Best Practices</title>
      <link>https://blog.simplypatrick.com/posts/2005/2005-03-10-224/</link>
      <pubDate>Thu, 10 Mar 2005 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2005/2005-03-10-224/</guid>
      <description>軟體測試的工作往往是軟體開發流程中較容易被輕忽的一環，而軟體測試的唯一產出就是 bug report，好的 bug report 可能讓你在幾分鐘內就把問題解決。有興趣的可以參考以下這幾篇關於如何做好 bug report 的文章：
 Bug Reporting Best Practices [PDF] The Fine Art of Writing a Good Bug Report Hallmarks of a Great Tester  </description>
    </item>
    
    <item>
      <title>NDepend &amp; NAnt</title>
      <link>https://blog.simplypatrick.com/posts/2005/2005-01-20-215/</link>
      <pubDate>Thu, 20 Jan 2005 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2005/2005-01-20-215/</guid>
      <description>因為讀 Patrick Smacchia 的這篇文章 Introduction to C# Anonymous Methods 而發現 NDepend (Mike Clark 之前就已經為 Java 實作了 JDepend) :
 NDepend analyses .NET assemblies of an application and generates design quality metrics. NDepend allows you to automatically measure the quality of a design in terms of its extensibility, reusability and maintainability to effectively manage and control the assemblies’ dependencies of your .NET applications. Moreover, NDepend helps you to get a thorough view of the topology of your application, at component at type and at member level.</description>
    </item>
    
    <item>
      <title>Installing CruiseControl.NET</title>
      <link>https://blog.simplypatrick.com/posts/2005/2005-01-12-213/</link>
      <pubDate>Wed, 12 Jan 2005 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2005/2005-01-12-213/</guid>
      <description>突然發現有人已經寫了一篇非常詳細的 CruiseControl.NET 的安裝指南，我想我也不可能寫的比他還詳細。有興趣的人可以先看這一篇，再跟我的設定對照參考。
我的機器上安裝了下列相關軟體：
 .NET Framework v1.1 Visual Studio .NET 2003 Perforce 2004.2 CruiseControl.NET 0.7 NAnt 0.85 NAntContrib 0.85 NUnit 2.2 NDoc 1.3 FxCop 1.312  CruiseControl.NET 設定的重點就是 server\ccnet.config：
&amp;lt;cruisecontrol&amp;gt; &amp;lt;project name=&amp;quot;PViewer&amp;quot;&amp;gt; &amp;lt;webURL&amp;gt;http://baby.homeip.net/ccnet/&amp;lt;/webURL&amp;gt; &amp;lt;workingDirectory&amp;gt;d:/temp/ccnet/&amp;lt;/workingDirectory&amp;gt; &amp;lt;triggers&amp;gt; &amp;lt;pollingInterval seconds=&amp;quot;60&amp;quot; /&amp;gt; &amp;lt;forceBuildSchedule time=&amp;quot;05:00&amp;quot; /&amp;gt; &amp;lt;/triggers&amp;gt; &amp;lt;labeller type=&amp;quot;defaultlabeller&amp;quot;&amp;gt; &amp;lt;prefix&amp;gt;ccnet-pviewer-&amp;lt;/prefix&amp;gt; &amp;lt;/labeller&amp;gt; &amp;lt;modificationDelaySeconds&amp;gt;10&amp;lt;/modificationDelaySeconds&amp;gt; &amp;lt;sourcecontrol type=&amp;quot;p4&amp;quot;&amp;gt; &amp;lt;view&amp;gt;//depot/src/main/...&amp;lt;/view&amp;gt; &amp;lt;executable&amp;gt;C:\Program Files\Perforce\p4.exe&amp;lt;/executable&amp;gt; &amp;lt;client&amp;gt;CCNET&amp;lt;/client&amp;gt; &amp;lt;user&amp;gt;Patrick&amp;lt;/user&amp;gt; &amp;lt;port&amp;gt;10.10.1.6:1666&amp;lt;/port&amp;gt; &amp;lt;autoGetSource&amp;gt;true&amp;lt;/autoGetSource&amp;gt; &amp;lt;/sourcecontrol&amp;gt; &amp;lt;build type=&amp;quot;nant&amp;quot;&amp;gt; &amp;lt;executable&amp;gt;NAnt.exe&amp;lt;/executable&amp;gt; &amp;lt;buildFile&amp;gt;src\main\PViewer\PViewer.build&amp;lt;/buildFile&amp;gt; &amp;lt;targetList&amp;gt; &amp;lt;target&amp;gt;all&amp;lt;/target&amp;gt; &amp;lt;/targetList&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;publishers&amp;gt; &amp;lt;xmllogger /&amp;gt; &amp;lt;/publishers&amp;gt; &amp;lt;tasks&amp;gt; &amp;lt;merge&amp;gt; &amp;lt;files&amp;gt; &amp;lt;file&amp;gt;src\main\PViewer\Test\bin\release\*.</description>
    </item>
    
    <item>
      <title>Continuous Integration on .NET platform</title>
      <link>https://blog.simplypatrick.com/posts/2005/2005-01-09-212/</link>
      <pubDate>Sun, 09 Jan 2005 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2005/2005-01-09-212/</guid>
      <description>最近把這兩本書看完：
Pragmatic Unit Testing in C# with Nunit (Pragmatic Programmers) by Andy Hunt, Dave Thomas
Pragmatic Project Automation: How to Build, Deploy, and Monitor Java Apps by Mike Clark
因為自己空閒時會用 C# 寫一些小程式，也就花了點時間把書中建議的開發環境架設起來，這兩天有空再把詳細的步驟分享給大家。
Continuous Integration 是 XP 的重要程序之一，藉由持續的整合測試可以將錯誤更正的反應時間降至最低，更進一步地提昇團隊的效率。然而如同 Martin Fowler 文章中的建議，實行 Continuous Integration 的關鍵是自動化，沒有自動化工具的輔助，實行這項程序其實是相當困難的。Ant, CruiseControl, 及 JUnit 是 Java 平台上建立 Continuous Integration 環境的利器；很幸運地在 .NET 環境下也有相對應的 NAnt, CruiseControl.NET 及 NUnit 可以使用。
除了上面提到的那兩本書，TheServerSide.NET 的這兩篇文章也可以參考：Managing .NET Development with NAnt and Continuous Integration with CruiseControl.NET and Draco.</description>
    </item>
    
    <item>
      <title>New Books about Agile Development</title>
      <link>https://blog.simplypatrick.com/posts/2004/2004-12-10-208/</link>
      <pubDate>Fri, 10 Dec 2004 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2004/2004-12-10-208/</guid>
      <description>似乎是兩本很有趣的書:
Agile and Iterative Development: A Manager&amp;rsquo;s Guide by Craig Larman
Balancing Agility and Discipline: A Guide for the Perplexed by Barry Boehm, Richard Turner
Agile Methodology 近年來已經成為軟體開發的顯學，每個人都在討論，確實對傳統軟體開發的觀念有許多衝擊。但是改變個人的觀念容易，改變一個團隊的觀念難，改變整個公司的觀 念更難，如何導入 Agile Methodology 將考驗決策者的智慧。問題是這種開發流程的改造能夠由下而上地進行嗎？或者是需要高層主管的支持才行？思考中&amp;hellip;</description>
    </item>
    
    <item>
      <title>Zero Bug Bounce</title>
      <link>https://blog.simplypatrick.com/posts/2004/2004-11-18-201/</link>
      <pubDate>Thu, 18 Nov 2004 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2004/2004-11-18-201/</guid>
      <description>期望有一天自己的產品也能達到 ZBB 的程度。</description>
    </item>
    
    <item>
      <title>GraphViz</title>
      <link>https://blog.simplypatrick.com/posts/2004/2004-10-28-191/</link>
      <pubDate>Thu, 28 Oct 2004 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2004/2004-10-28-191/</guid>
      <description>嘗試用 GraphViz 畫 Release Line Pattern：
digraph G { node [shape=box]; { edge [arrowhead=none]; rank = same; &amp;quot;/main&amp;quot; -&amp;gt; &amp;quot;Release 1 Work&amp;quot; -&amp;gt; b1 -&amp;gt; &amp;quot;Release 2 Work&amp;quot; -&amp;gt; mr1fix -&amp;gt; b2; b2 -&amp;gt; future [arrowhead=normal]; b1 [label=&amp;quot;1.0&amp;quot; shape=circle]; mr1fix [label=&amp;quot;&amp;quot; shape=circle]; b2 [label=&amp;quot;2.0&amp;quot; shape=circle]; future [label=&amp;quot;&amp;quot; shape=plaintext]; } b1 -&amp;gt; r1; { edge [arrowhead=none]; rank = same; r1 -&amp;gt; r1fix -&amp;gt; r1m; r1 [label=&amp;quot;/Release 1&amp;quot;]; r1fix [label=&amp;quot;Bug Fixes&amp;quot;]; r1m [label=&amp;quot;&amp;quot; shape=circle]; } r1m -&amp;gt; mr1fix [style=dotted]; b2 -&amp;gt; r2; { rank = same; r2 -&amp;gt; r2future; r2 [label=&amp;quot;/Release 2&amp;quot;]; r2future [label=&amp;quot;&amp;quot; shape=plaintext]; } } 有興趣的人可以參考 An Introduction to GraphViz。</description>
    </item>
    
    <item>
      <title>Blog for nightly build changelog</title>
      <link>https://blog.simplypatrick.com/posts/2004/2004-10-26-190/</link>
      <pubDate>Tue, 26 Oct 2004 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2004/2004-10-26-190/</guid>
      <description>The Burning Edge 是 Mozilla Firefox 用來追蹤 nightly build 狀態的 blog，算是一種蠻特別的 blog 應用。在裡面，你可以看到每天 bug 修正的進度以及當天 build 的狀況，例如：
 Fixed: 265839 - External protocol handling broken (since Oct 21). Fixed: 263846 - Crash [@ nsImageFrame::FrameChanged][@ nsImageFrame::SourceRectToDest]. Fixed: 265849 - There&amp;rsquo;s no longer an Options button in the Download Manager. Fixed: 265826 - Update linux installer artwork. Fixed: 265829 - History code passes incorrect length to NS_ConvertUTF16toUTF8.  Official Windows, Official Windows installer (discussion), bangbang&amp;rsquo;s</description>
    </item>
    
    <item>
      <title>AccuRev</title>
      <link>https://blog.simplypatrick.com/posts/2004/2004-07-10-170/</link>
      <pubDate>Sat, 10 Jul 2004 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2004/2004-07-10-170/</guid>
      <description>06 Oct 16: 由於 AccuRev 的網站資料有些更新，所以我就把這篇小改了一下，順便移除幾個已經失效的URL。
昨天好不容易有空把這一期的 IEEE Software 翻了一 下，發現2004 年的 Jolt Awards 出爐了，其中的 Change and Configuration Management Tools 獎項是由 AccuRev 3.3.1抱走。
AccuRev 的獨特之處在於並非採用傳統的 file-based (如 CVS) 或是 branch-based (Perforce 或是 Subversion) 的思考方式，而是能反映實際工作流程的 stream-based 系統。我建議可以參考這個 demo 來快速了解其設計概念。
其中我最欣賞的兩個特色是 Private Versions 的支援與特別的 Progressive Promotion；Private Versions 允許 programmer 保存自己的更改紀錄而不影響到其他人的工作；Progressive Promotion 則是允許程式碼的改動可以根據工作流程而發佈出來。我相信這樣的版本控制系統應該會慢慢地在市場占有一席之地，其後勢發展是值得注意的。</description>
    </item>
    
    <item>
      <title>Streamed Lines</title>
      <link>https://blog.simplypatrick.com/posts/2004/2004-06-15-163/</link>
      <pubDate>Tue, 15 Jun 2004 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2004/2004-06-15-163/</guid>
      <description>軟體開發流程裡頗為複雜的一項工作就是 source code branching，也就是為了某個目的，將程式碼複製為數個分支，分別以不同的方式進行開發與維護。
Streamed Lines: Branching Patterns for Parallel Software Development 是 Brad Appleton 等人為了實現平行開發而提出的 patterns。整篇文章有 67 頁之多，已經快要可以出一本書了，不過值得對 SCM 有興趣的人細讀。</description>
    </item>
    
    <item>
      <title>Team System</title>
      <link>https://blog.simplypatrick.com/posts/2004/2004-06-02-157/</link>
      <pubDate>Wed, 02 Jun 2004 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2004/2004-06-02-157/</guid>
      <description>Rational 及其他軟體開發工具廠商注意了，因為 Microsoft 即將出招，那就是 Visual Studio 2005 Team System。
看了幾個 demo，Team System 跟 Visual Studio 的整合程度相當地高，整體上而言頗令人期待。與開發流程中的設計、測試、專案管理及協同作業的整合是這個產品的主題：
 代號『Whitehorse』的 Distributed Systems Design。 靜態程式分析工具: PREfix &amp;amp; PREfast，詳情可以參考本期 IEEE Software 的 《Righting Software》。 專案管理的工具 增強的原始碼管理工具: 沒提到跟 Visual SourceSafe 的詳細差異，我期待能有一些令人驚訝的改進。 整合的測試環境: Test-Driven Development 終於可以更簡單地實現。  只是似乎少了一個 bug tracking system。</description>
    </item>
    
    <item>
      <title>Coder To Developer</title>
      <link>https://blog.simplypatrick.com/posts/2004/2004-05-07-151/</link>
      <pubDate>Fri, 07 May 2004 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2004/2004-05-07-151/</guid>
      <description>Coder To Developer 是 Eric Sink 及 Joel 推薦的好書，網站上有完整的目錄及試讀的章節。
你剛從學校畢業，苦惱於該選擇去「規模大而制度完整」或「規模小但正在起步」的軟體公司。作為你的第一份工作，我認為小軟體公司會是比較好的選擇，因為『你必須學會更多的東西』。在小軟體公司工作，programmer 除了基本的 coding 能力外，還得學會如何做需求分析 (requirement analysis)、架構設計 (architecture design)、時程控制 (scheduling)、選擇開發方式 (methodology)、程式碼版本控制 (source code version control)、錯誤追蹤 (bug tracking)、文件撰寫 (documentation) 等等。當然不是說大的軟體公司不做這些事，而是你會比較有機會親身參與並規劃這些事，從其中學到的東西絕對比在大公司來的多。
如果你現在就在小軟體公司工作，我想《Coder To Developer》有一些實用的建議可以讓你把這些事情做的更好。</description>
    </item>
    
    <item>
      <title>SourceUnsafe</title>
      <link>https://blog.simplypatrick.com/posts/2004/2004-04-22-148/</link>
      <pubDate>Thu, 22 Apr 2004 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2004/2004-04-22-148/</guid>
      <description>每次有人推薦使用 Microsoft Visual SourceSafe 的時候，我就會忍不住跳出來告訴他們這篇文章 Visual SourceSafe: Microsoft&amp;rsquo;s Source Destruction System。
我已經很多年沒有用 VSS 了，也不懷抱任何一絲絲的希望 Microsoft 會想要改進這些缺點，因為實在有其他更好的選擇。我甚至懷疑 Microsoft 自己用不用 VSS 存 Windows 的 source code？Microsoft 自己都不吃的狗食怎麼會讓人有信心使用？</description>
    </item>
    
    <item>
      <title>SCM 好書推薦</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-12-27-113/</link>
      <pubDate>Sat, 27 Dec 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-12-27-113/</guid>
      <description>講到 svn，順便推薦一本不錯的書《Software Configuration Management Patterns: Effective Teamwork, Practical Integration》，自己看 amazon.com 上面的評論吧。書中提到的 pattern 如 Integration Build, Task Level Commit, Codeline Policy, Release Line, Task Branch 等等在實務上都非常地有用。
一家軟體公司的專業與否往往看他們怎麼管理程式碼就可以看出來。身為程式員，你服務的公司做到了多少？我想絕大多數的台灣軟體公司都不及格。&amp;lt;sigh&amp;gt;</description>
    </item>
    
    <item>
      <title>你還在用 VSS 嗎?</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-12-26-112/</link>
      <pubDate>Fri, 26 Dec 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-12-26-112/</guid>
      <description>第一次注意到 Subversion (簡稱 svn) 已經是兩年前的事了。我對於 CVS 一直是雖不滿意但能接受，只是當時的我深深地覺得 &amp;ldquo;Programmers deserve a better version control system.&amp;quot;。svn 經過兩年多的耕耘，已經實現了許多程式員渴望的功能，穩定度也相當不錯。
svn 最讓我驚訝的它絕妙的檔案系統設計，幾乎是讓你以零成本的代價進行程式碼的分支 (branching)，而同時也提供方便的檔案更名及移動的版本控制，跟 Perforce 提供的 Inter-File Branching 有異曲同工之妙。如果你也注意到 svn 的 tag 跟 branch 居然是用同一套機制時，你就不禁會佩服設計者的巧思。
今天花了點時間，參考《Subversion Book 中文版》把 subversion 0.32.1 裝在我腳邊運作著 Debian Linux 的機器上，比較討厭的是不能跟 apache 1.x 相容，需要另外安裝 apache2。Windows client 則是使用 TortoiseSVN，跟檔案總管整合起來還蠻方便的。其他的 GUI client (RapidSVN, Svn-Up, Supervision) 試用的結果都不是很成熟， 我想現在缺的就是一個類似 WinCVS 的 WinSVN 了。
真的是該準備跟你的 Visual SourceSafe 跟 CVS 說再見了。</description>
    </item>
    
    <item>
      <title>Good software, like wine, takes time.</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-12-02-101/</link>
      <pubDate>Tue, 02 Dec 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-12-02-101/</guid>
      <description>我喜歡 Joel 的這篇文章《Good Software Takes Ten Years. Get Used To it.》。
直覺地想，programmer 的生產力應該是隨著軟體技術的發展而增加，因為有了新的工具及方法的輔助；然而事實是如此嗎？
程序員的生產力似乎並沒有大幅地進步〈我沒有任何資料可以印證這個看法，純粹就我個人的觀察〉， 我認為主要的原因是因為要開發的軟體也同時變複雜了，如此一消一長，軟體業還是停留在需要大量腦力的狀態。 就拿最簡單的 &amp;ldquo;Hello World&amp;rdquo; 為例，DOS 版、 Windows API 版本、MFC 版本，一個比一個複雜，越需要更多的背景知識來確保程式運作正常。
那最新的 .NET 就能改善這情況嗎？我並不對此感到樂觀。那麼 programmer 該怎麼辦呢？ 我個人認為還是要務實、不好高騖遠、必須對底層的運作機制有一定程度的了解、多方面地充實自己的知識。
To be a good programmer, like wine, takes time.</description>
    </item>
    
    <item>
      <title>Have you watched fight club?</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-10-21-83/</link>
      <pubDate>Tue, 21 Oct 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-10-21-83/</guid>
      <description>非常棒的一個討論串：Software Defects - Do Late Bugs Really Cost More?，討論一個軟體人一定要有的觀念：『Bug 修正的成本隨時間而遞增』。</description>
    </item>
    
    <item>
      <title>Software Development</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-10-18-82/</link>
      <pubDate>Sat, 18 Oct 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-10-18-82/</guid>
      <description>Steve McConnell, &amp;ldquo;Professional Software Development&amp;rdquo;, chapter 4 - Software Engineering, Not Computer Science
 During software design, I&amp;rsquo;m an architect. When I&amp;rsquo;m designing the user interface, I&amp;rsquo;m an artist. During construction, I&amp;rsquo;m a craftsman. And during unit testing, I&amp;rsquo;m one mean son of a bitch!
 </description>
    </item>
    
    <item>
      <title>Joel 的新辦公室</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-09-30-78/</link>
      <pubDate>Tue, 30 Sep 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-09-30-78/</guid>
      <description>Joel 的新辦公室看起來真是讚，programmer 就該有這樣的工作空間。Philip Greenspun 的《Managing Software Engineers》討論如何營照一個比家還棒的工作環境，看完後我的感想是這篇文章應該改名叫《如何讓 programmer 不想回家》。
何時老闆們才會了解：
Software engineering is different.  </description>
    </item>
    
    <item>
      <title>Leading a Software Development Team</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-09-15-73/</link>
      <pubDate>Mon, 15 Sep 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-09-15-73/</guid>
      <description>我非常喜歡 Richard Whitehead 的這本《Leading a Software Development Team》，書中教導如何有效地管理一個軟體團隊，內容相當地有趣及易懂。在軟體業界，許多人往往是因為優異的技術能力被提升為主管，完全沒有管理經驗的人往往會適應不良，便萌生“還是單純地搞技術比較輕鬆 ”這種想法，而這本書就是這些菜鳥主管的救星啦。整本書以一問一答的方式來組織，瞧瞧下列的這幾個是不是一直困擾你很久的問題：
   I&amp;rsquo;ve just been made team leader of a new project. Where do I start?    I have to interview a job applicant. How do I go about it?    How do I earn the respect of my team?    How can I get a good job done when our procedures are so bad?</description>
    </item>
    
    <item>
      <title>Under Pressure and On Time</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-09-07-70/</link>
      <pubDate>Sun, 07 Sep 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-09-07-70/</guid>
      <description>最近逛書店時很驚訝地發現這本書的中文版《e世紀軟體開發術》(光看這書名我實在不大想買)，由於之前曾經在 amazon.com 看過它的簡介與評價，便順手買了下來。
Numega 應該是大家耳熟能詳的一家公司，Windows Programming 領域中鼎鼎有名的 Matt Pietrek 及 John Robbins 都曾從事於該公司。Ed Sullivan 在這本書中所描述狀況，其實正是所有草創初期的軟體公司一定會遇到的問題，然而並不是每一家公司克服這些困難而存活下來，其中最大的關鍵點就是『持續地改進軟體開發的程序』。我常訝異於許多軟體公司居然能夠在沒有 source code control system 的環境下工作，難道他們不知道如何讓自己的工作更有效率嗎？
Ed 在本書中提出了許多軟體開發的關鍵問題與答案，然而你不應該對 Ed 的標準答案期待太多，因為他的方法並不一定適用於你 (Ed 的答案也並不十分詳盡而完善)，正因為軟體開發沒有所謂的萬靈丹。然而 Ed 已經領你進門了，真正關心自己的工作並且要去思考的不就是你自己嗎?</description>
    </item>
    
    <item>
      <title>We will not ship shit</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-07-27-68/</link>
      <pubDate>Sun, 27 Jul 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-07-27-68/</guid>
      <description>We will not ship shit ，乍看之下只是一個自命不凡的激情口號，不是嗎？
軟體是用人的腦子設計出來的，而所謂的設計本就牽涉許多的考量與取捨 (trade-offs)。 身為軟體設計者的我們必須常常面對『現實』與『理想』的抉擇，『現實』指的是在短時間內完成產品， 而『理想』則為產品的高品質。這兩者是否如魚與熊掌不可兼得？ 答案事實上已經公認為否定的，並且大家相信『對於高品質的要求甚至會縮短軟體開發所需的時程』。 因此所謂的『理想』並不只基於對軟體開發的熱情及對專業的自尊，也是為更實際的考量。 要看一個人是不是一流的程式員，就是看他對於自己作品的要求高不高。
 &amp;ldquo;Think twice before you make shit.&amp;rdquo;
 </description>
    </item>
    
    <item>
      <title>Iceberg Sneak-Ins</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-07-07-67/</link>
      <pubDate>Mon, 07 Jul 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-07-07-67/</guid>
      <description>Everything looks easier than it really is. New features are like icebergs. Most of the effort is invisible, hiding below the water, waiting to sink your project. The actual implementation effort is the visible part sticking above the water.
 在《Iceberg Sneak-Ins》這篇文章，Eric 討論了一個軟體界最常見的問題：feature creep。Feature creep 指的是『程式的規格在開發的過程中持續被更動』，其中包含了『變更』及『新增』功能。Eric 特別針對『臨時增加的小功能』提出了一些實用的建議。
另一篇文章《Killing Feature Creep Without Ever Saying No》也值得參考。</description>
    </item>
    
    <item>
      <title>developer vs. programmer, part II</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-07-05-65/</link>
      <pubDate>Sat, 05 Jul 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-07-05-65/</guid>
      <description>我在之前的一篇文章中提到了 Developer 跟 Programmer 的差別，而 Eric 的文章《Small ISVs: You need Developers, not Programmers》把這一點講的更清楚了。
Developers 可以比喻為軟體設計的『通才』，而 Programmers 則是軟體設計的『專才』。正如其他一般的行業，通才是比較吃得開的，因為他們的彈性比起專才大的多，也較受企業的歡迎。然而現實上，一般的大學教育還是以訓練專才為主，也就是寫程式的能力。在學校，沒有人教你如何寫 spec、如何管理 software configuration、如何寫程式文件、如何測試及偵錯程式等等必需的技能，這些東西往往是到業界來才邊做邊學的。事實上，別小看這些看起來很簡單的事情，如果你能比同儕更快學會這些事或是做的更好，你很有可能就會得到上司的賞識而晉升。
總之，別侷限於自己的專精領域，看的更廣會讓你做的更好。</description>
    </item>
    
    <item>
      <title>::Manageability::</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-07-04-63/</link>
      <pubDate>Fri, 04 Jul 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-07-04-63/</guid>
      <description>發現了一個很棒的 weblog: ::Manageability::，在那裡可以看到許多關於軟體開發的有趣討論〈大多數的文章都是有關 Java 的〉。
其中的一則文章《Thinking Styles and Software Engineering 》提到了一個有趣的心理測驗，可以用來測試你或是他人偏向那一種思考模式，也許值得應用在面試新人上。</description>
    </item>
    
    <item>
      <title>辦公室規劃</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-06-20-55/</link>
      <pubDate>Fri, 20 Jun 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-06-20-55/</guid>
      <description>Fog Creek Software 的搬家故事
看來是個很溫馨的小公司。我想很多人加班到深夜〈例如我〉就是因為待在充滿人造燈光的室內，而缺乏陽光的滋潤，也打亂了『日出而做，日落而息』的生物規律。
我只要一想到『靠窗的工作隔間』，就會有一種幸福的感覺，只是不知道何時才能實現這個小小的願望…</description>
    </item>
    
    <item>
      <title>The Life of a Project - Issue Tracking</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-06-18-53/</link>
      <pubDate>Wed, 18 Jun 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-06-18-53/</guid>
      <description>朋友轉寄給我的一篇文章《The Life of a Project - Issue Tracking: Day 1 》。
我想重點在於作者如何把一個構想 (idea) 經由分析思考而轉化成具體的需求 (requirements)。
Software Requirements Analysis and Management 其實是門很大的學問，有興趣的人我推薦 Karl E. Wiegers 的《Software Requirements》當作入門書。在眾多軟體需求管理的書籍中，它至少讓我讀起來比較不會昏昏欲睡。</description>
    </item>
    
    <item>
      <title>A Community of Software Thinkers</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-06-11-49/</link>
      <pubDate>Wed, 11 Jun 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-06-11-49/</guid>
      <description>Artima Weblogs 是一個以討論軟體設計為主的 weblog，其中有許多話題正是我最近感到興趣的:
 《Refactoring To Aspects》討論的是 Aspect-Oriented Programming 《One per Pixel》討論軟體開發人員的生產力問題 《Are Programmers People? And If So, What to Do About It?》討論的似乎也很有趣  </description>
    </item>
    
    <item>
      <title>Manifesto for Agile Software Development</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-06-11-51/</link>
      <pubDate>Wed, 11 Jun 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-06-11-51/</guid>
      <description>Agile Manifesto 代表的是 Agile Software Development 的核心精神。
 We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value:
   Individuals and interactions over processes and tools Working software over comprehensive documentation Customer collaboration over contract negotiation Responding to change over following a plan    That is, while there is value in the items on the right, we value the items on the left more.</description>
    </item>
    
    <item>
      <title>Pair Programming</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-05-12-24/</link>
      <pubDate>Mon, 12 May 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-05-12-24/</guid>
      <description>那麼 Robert Fulghum 的《All I Really Need to Know I Learned in Kindergarten 》怎麼又會跟 Extreme Programming 所提倡的 Pair Programming 扯上關係呢？ 看看這篇曾經刊登於 Communications of the ACM 的文章《All I Really Need to Know about Pair Programming I Learned In Kindergarten》吧。
  Pair programming is a style of programming in which two programmers work side-by-side at one computer, continuously collaborating on the same design, algorithm, code or test. As discussed below, use of this practice has been demonstrated to improve productivity and quality of software products.</description>
    </item>
    
    <item>
      <title>Software Process Management</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-05-08-21/</link>
      <pubDate>Thu, 08 May 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-05-08-21/</guid>
      <description>在 Process Impact – Software Process Improvement Consulting and Education 可以找到許多 Karl Wiegers 的文章，對於 Software Process Management 有興趣的人值得一看。</description>
    </item>
    
    <item>
      <title>Joel on Software</title>
      <link>https://blog.simplypatrick.com/posts/2003/2003-05-04-13/</link>
      <pubDate>Sun, 04 May 2003 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2003/2003-05-04-13/</guid>
      <description>很酷的一個網站，Joel 很直接地點出許多於軟體業存在以久的蠢事。你認為軟體業是高科技產業嗎？錯，大部分的公司還是漫無章法地進行軟體開發，把軟體開發人員當成廉價勞工使用。我想你應該聽聽 Joel 怎麼說，其中最精采的幾篇文章已經翻成中文，值得你細細體會，並絕對能博你一笑。</description>
    </item>
    
  </channel>
</rss>
