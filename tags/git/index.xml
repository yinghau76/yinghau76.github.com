<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on Simply Patrick</title>
    <link>https://blog.simplypatrick.com/tags/git/</link>
    <description>Recent content in git on Simply Patrick</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 03 Dec 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.simplypatrick.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git Workflow</title>
      <link>https://blog.simplypatrick.com/posts/2011/12-03-git-workflow/</link>
      <pubDate>Sat, 03 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2011/12-03-git-workflow/</guid>
      <description>由於 git 要開分支很容易，但要怎麼運用分支來管理就是一門學問了。在網路上最常看到的是 Git Flow：
除了這個方式外，另外一種常用的方法是如 git help workflows 所描述的。為了容易理解，我用 Pencil 畫了這張示意圖：
雖然前後兩張圖用的 branch 的名稱及用途不大一樣，但有些基本道理是相同的：
 平常只從穩定的分支 merge 到不穩定的分支。這裡的穩定及不穩定是相對的，例如第二張圖中 maint 比 master 穩定，而 master 又比 next 穩定；在第一張圖中，release 比 develop 穩定，hotfix 又比 develop 穩定。我說的 merge 是 git 中 branch to branch 的 merge，例如 merge A to B 是讓 branch A 所有的改動都合併到 branch B 中。 在適當的時候可以從不穩定分支合併改動到穩定分支，例如第一張圖中的 developer -&amp;gt; release -&amp;gt; master 的合併，又例如第二張圖中的 next -&amp;gt; master -&amp;gt; maint。 Bugfix 應該 check-in 到最舊且需要這個改動的分支，然後再根據上一條規則的作法傳佈到較新的分支上。這樣做可以確保不會有忘記 merge 的 bugfix。 新 feature 都應該在獨立的分支中開發。  不管是用那一種方式，善用分支來管理產品的開發及產品發佈已經是個軟體開發人員必備的技能了，如果你還不熟悉，趕快找個機會把這些方法用到你目前正在做的工作上吧。</description>
    </item>
    
    <item>
      <title>Git and SourceTree</title>
      <link>https://blog.simplypatrick.com/posts/2011/10-23-git-and-sourcetree/</link>
      <pubDate>Sun, 23 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2011/10-23-git-and-sourcetree/</guid>
      <description>由於 Git 在 Linux/Windows 上都沒有比較好用的 GUI client，我向來是習慣直接在命令列敲指令，好處是簡單而且快，比較大的缺點就是瀏覽歷史記錄時比較麻煩，陽春又醜的 gitk 我通常是不得已才會去開它，所以換到 Mac OS X 上後，簡單好用而且開源的 GitX 自然就成為我的最愛，但 GitX 的更新實在有點慢，愛嘗鮮的我便一直注意著是否有更好的選擇。
後來有試用過 Tower，整個 UI 比 GitX 漂亮許多，使用設計上也相當不錯，正想說可以&amp;rsquo;定居&amp;rsquo;下來，沒想到中間殺出個 SourceTree，而且因為這個產品被 Atlassian 收購了，在 Mac App Store 正免費大放送中，估計之後會有跟 BitBucket 更緊密的功能整合。
本來 Mac OS X 就是讓 programmer 感覺很舒服的開發環境，有了 SourceTree 之後變更棒了。</description>
    </item>
    
    <item>
      <title>Git and Jun</title>
      <link>https://blog.simplypatrick.com/posts/2011/06-17-git-and-jun/</link>
      <pubDate>Fri, 17 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2011/06-17-git-and-jun/</guid>
      <description>大家一般知道 Git 的發明者是 Linus Torvalds，但是實際上假如你常查閱 git help 的話，你會發現 Junio C Hamano 這個名字出現的次數實在比 Linus 多很多。如果說 Linus 是 Git 之父，Jun 應該就是 Git 之母了。
Jun 目前在 Google 工作，Android 或是 Chrome OS 都選擇用 Git 也算是支持自家人了。下面是他的在 Open Source At Google 接受訪談的影片：
 附記：
 Google 內部用的 VCS 應該不是秘密吧，聽說是修改過的 Perforce。 訪問者啕侃了一下 Jun 為什麼 Git 這麼難用不好學。 XD  </description>
    </item>
    
    <item>
      <title>git: content addressable filesystem</title>
      <link>https://blog.simplypatrick.com/posts/2006/2006-10-17-351/</link>
      <pubDate>Tue, 17 Oct 2006 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2006/2006-10-17-351/</guid>
      <description>今天花了點時間玩了一下 git，頗有趣，我想 git 應該會成為 subversion 之外的另一個主流。因為 git 的版本號碼不再是傳統的數字編號，而是如 e2659fcf690ec693c04c82b03202fc5530d50960 這樣的十六進位數字，真是有點不習慣，還好這樣的版本號碼只要沒重複到是可以簡稱的，例如 e2659f，不然的話光打這些字就會被搞死了。
不過還是有點概念沒搞清楚，這幾天再練習看看囉。</description>
    </item>
    
  </channel>
</rss>
