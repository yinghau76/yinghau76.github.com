<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>build on Simply Patrick</title>
    <link>https://blog.simplypatrick.com/tags/build/</link>
    <description>Recent content in build on Simply Patrick</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 23 Jan 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.simplypatrick.com/tags/build/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GN (Generate Ninja) 使用入門</title>
      <link>https://blog.simplypatrick.com/posts/2016/01-23-gn/</link>
      <pubDate>Sat, 23 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2016/01-23-gn/</guid>
      <description>2018/06/30 補充: Brett Wilson 的 Using GN build 是我目前看過對 GN 最棒的介紹，強力推薦!
好久之前介紹過 Ninja, 當時有提到 Ninja 通常是搭配 meta-build system (例如 CMake 或是 GYP) 來使用，這次要介紹的 GN 則是 Chromium project 用來取代 GYP 的新工具。
由於 GN 是用 C++ 撰寫，比起用 Python 寫的 GYP 快了將近 20 倍，GN 新的 DSL 的語法也被認為是比較好讀及維護的。
安裝 GN 由於 gn 目前還依賴 Chromium 裡的一些函式庫，目前比較方便的方式還是從 source 編譯，Linux/Mac 上可以依照下列步驟：
 基本範例 建立 .gn 在 source project 的根目錄新增一個 .gn 檔，內容如下：
 .gn 檔所在的目錄會被 GN 工具認定是 project 的 source root，.</description>
    </item>
    
    <item>
      <title>CMake 筆記</title>
      <link>https://blog.simplypatrick.com/posts/2015/06-19-cmake-notes/</link>
      <pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2015/06-19-cmake-notes/</guid>
      <description>動機 因爲某種原因，我最近又開始寫起 C++ 程式，除了要熟悉 C++ 11/14 的新特性外，比較頭疼的是 Makefile 的撰寫。
C/C++ 開發者了解基本的 Makefile 寫法是有必要的，但是大多數情況下，我認為使用 autotools 或是 CMake 這類 Makefile generator 是比較合理的選擇，因爲這些工具可以幫你產生出專家等級的 Makefile 並且處理可能的跨平台問題。至於 autotools 或是 CMake 的選擇，對我來說是很明顯的：autotools 是出了名的難用，而 CMake 是相對容易的。
本文嘗試整理一些網路上的 CMake 教學資源，並且加上自己的一些心得。
CMake 入門 我會建議先看 Eric Noulard 的 CMake tutorial presentation，相當地棒：
 然後你會需要實際動手演練一下，有下面幾個選擇：
 CMake 官網上的基本範例：文字說明比較少，但可以讓你先感覺一下 CMake 的運作方式。我自己根據這個範例建了這個 GitHub project 來練習。 維基教科書上的 CMake 入門 John Lamp 的 CMake Tutorial 提供了一個更實際的範例讓你練習，並且詳細解釋了每一行用到的 CMake 指令。  CMake 基礎知識 再來就是要花時間把官網的這篇 cmake-buildsystem(7) 讀一讀，有幾個重點要搞懂：
 如何使用 add_library 及 add_executable 來新增 build target － 了解 STATIC, SHARED, MODULE, 以及 OBJECT library 的差異 了解 build specification:  INCLUDE_DIRECTORIES, COMPILE_DEFINITIONS 以及 COMPILE_OPTIONS 的意義   了解 usage requirement:  INTERFACE_INCLUDE_DIRECTORIES, INTERFACE_COMPILE_DEFINITIONS 及 INTERFACE_COMPILE_OPTIONS 的意義   如何使用 target_include_directories(), target_compile_definitions() 及 target_compile_options() 來修改 build specification 及 usage requirement  了解 PRIVATE, PUBLIC 及 INTERFACE mode 的差異 跟 directory-scoped 命令的差異: include_directories(), add_definitions(), 及 add_compile_options()   常用的內建變數  CMAKE_CURRENT_SOURCE_DIR CMAKE_CURRENT_BINARY_DIR   如何使用 set_target_properties 來修改 target property 了解 generator expression 的用法  上面提到的這些重要觀念可以參考 Introduction to CMake in 30 Minutes 的說明。</description>
    </item>
    
    <item>
      <title>Ninja - a small build system</title>
      <link>https://blog.simplypatrick.com/posts/2012/08-18-ninja-a-small-build-system/</link>
      <pubDate>Sat, 18 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/posts/2012/08-18-ninja-a-small-build-system/</guid>
      <description>快才是王道  Ninja is a small build system with a focus on speed. It differs from other build systems in two major respects: it is designed to have its input files generated by a higher-level build system, and it is designed to run builds as fast as possible.
 Ninja 非常簡約的首頁這樣地描述著自己。對我而言，它是絕佳的 make 替代品，因為它速度飛快而且語法簡潔易懂。
這是一個簡單的 build.ninja 範例:
cxx = g++ cflags = -g -Iinclude -Iout -I/usr/local/include -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-exceptions -fno-rtti -fno-common -Woverloaded-virtual -Wcast-qual -L/usr/local/lib -lpthread -lm -lLLVMX86Disassembler -lLLVMX86AsmParser -lLLVMX86CodeGen -lLLVMX86Desc -lLLVMSelectionDAG -lLLVMAsmPrinter -lLLVMMCParser -lLLVMX86AsmPrinter -lLLVMX86Utils -lLLVMX86Info -lLLVMJIT -lLLVMExecutionEngine -lLLVMCodeGen -lLLVMScalarOpts -lLLVMInstCombine -lLLVMTransformUtils -lLLVMipa -lLLVMAnalysis -lLLVMTarget -lLLVMMC -lLLVMCore -lLLVMSupport rule flex command = flex -o $out $in rule bison command = bison -d -o $out $in rule cxx command = $cxx $cflags -o $out $in build out/tokens.</description>
    </item>
    
  </channel>
</rss>
