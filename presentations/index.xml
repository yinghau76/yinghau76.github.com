<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Presentations on Simply Patrick</title>
    <link>https://blog.simplypatrick.com/presentations/</link>
    <description>Recent content in Presentations on Simply Patrick</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://blog.simplypatrick.com/presentations/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://blog.simplypatrick.com/presentations/2018-01-27-kotlin-coroutines-explained/slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.simplypatrick.com/presentations/2018-01-27-kotlin-coroutines-explained/slides/</guid>
      <description>Kotlin Coroutines Explained with Examples What is Coroutine? Coroutines are computer-program components that generalize subroutines for non-preemptive multitasking, by allowing multiple entry points for suspending and resuming execution at certain locations
&amp;ndash; Coroutine - Wikipedia
 Basically, coroutines are computations that can be suspended without blocking a thread.
&amp;ndash; Kotlin Reference / Functions and Lambdas / Coroutines
Overview  Start a coroutine Create a coroutine  Coroutine Internals How to Suspend How to Resume   Concurrency Model More about Threading  Start a coroutine Coroutine Builder  Use built-in coroutine builder  runBlocking{} launch{} async{} buildSequence{} produce{}   All these builders accept a suspending lambda  Example: runBlocking fun &amp;lt;T&amp;gt; runBlocking( context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.</description>
    </item>
    
  </channel>
</rss>
